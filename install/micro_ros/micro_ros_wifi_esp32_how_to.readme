micro_ros_wifi_esp32_how_to.readme


1.) docker installieren und testen

    https://docs.docker.com/engine/install/ubuntu/

    # Add Docker's official GPG key:
    sudo apt-get update
    sudo apt-get install ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    # Add the repository to Apt sources:
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
    $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update

    sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    
    Chek Docker Version installed 
        $ docker --version

    ###### Enable Docker ############
     ===>>>    $ sudo systemctl start docker
    Run Hello World
      $ sudo docker run hello-world

2.) ESP32 — micro-ROS actually working over WiFi and UDP Transport
https://robofoundry.medium.com/esp32-micro-ros-actually-working-over-wifi-and-udp-transport-519a8ad52f65

    $ sudo chmod 666 /dev/ttyUSB0
    $ cd esp32/microROS/micro_ros_espidf_component/
    $ sudo docker run -it --rm --user espidf --volume="/etc/timezone:/etc/timezone:ro" -v  $(pwd):/micro_ros_espidf_component -v  /dev:/dev --privileged --workdir /micro_ros_espidf_component microros/esp-idf-microros:latest /bin/bash  -c "cd examples/int32_publisher; idf.py menuconfig build flash monitor"
    

    Agent starten und Topic anzeigen lassen:
        $ docker run -it --rm --net=host microros/micro-ros-agent:humble udp4 --port 8888 -v6
        $ ros2 topic echo /freertos_int32_publisher 
    oder wenn micro-ros installiert (tested OK) 
        $ ros2 run micro_ros_agent micro_ros_agent udp4 --port 8888 -v6
        $ ros2 topic echo /freertos_int32_publisher 

        Installation AGent:  git clone -b $ROS_DISTRO https://github.com/micro-ROS/micro_ros_setup.git src/micro_ros_setup
         ?$ build
         ?$ ros2 run micro_ros_setup create_agent_ws.sh
         ?$ ros2 run micro_ros_setup build_agent.sh

3.) Programmieren des ESP32
ROS_LOCALHOST_ONLY = 0 
ROS_DOMAIN_ID = 0 
            $ cd esp32/microROS/micro_ros_espidf_component/
            $ sudo chmod 666 /dev/ttyUSB0
        starten des Espressif IoT Development Framework Configuration - Tool 
            $ sudo docker run -it --rm --user espidf --volume="/etc/timezone:/etc/timezone:ro" -v  $(pwd):/micro_ros_espidf_component -v  /dev:/dev --privileged --workdir /micro_ros_espidf_component microros/esp-idf-microros:latest /bin/bash  -c "cd examples/int32_publisher; idf.py menuconfig build flash monitor"
        dort unter micro ROS Settings die IP und den Host -> Wifi Configuratin konfiguieren bzw. checken    
            mit Q beenden, 
            dabei Boot Button auf dem ESP32 gedrückt halten, damit Programm (Firmware) auf den ESP32 hochgeladen werden kann.
            nach upload loslassen und  EN - Button betätigen
            Programm laufen lassen
            ...
                Publishing: 0
                Publishing: 2
                Publishing: 4
                Publishing: 6
            ...


        In neuem Tab den Agent starten, EN - Button betätigen
            $2 ros2 run micro_ros_agent micro_ros_agent udp4 --port 8888 -v6
            ...
            [1736418068.316942] debug    | UDPv4AgentLinux.cpp | send_message             | [** <<UDP>> **]        | client_key: 0x4B93AB48, len: 13, data: 
            0000: 81 00 00 00 0A 01 05 00 EA 00 00 00 80
            ...

        Topic vom ESP32 empfangen
            $3 ros2 topic echo /freertos_int32_publisher


4.) Änderung des ESP32 -Codes  msg+=2;  funktioniert !!!!

/home/oj/esp32/microROS/micro_ros_espidf_component/examples/int32_publisher/main.c

void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
	RCLC_UNUSED(last_call_time);
	if (timer != NULL) {
		printf("Publishing: %d\n", (int) msg.data);
		RCSOFTCHECK(rcl_publish(&publisher, &msg, NULL));
		msg.data++;
		msg.data++;
	}
}


5.) ohne Docker => https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/linux-macos-setup.html
Expressif IDE installieren und HEllo World builden und flashen
=> sendet auf Arduino-IDE Serial Monitor mit 115200 Baud

        Restarting in 10 seconds...
        Restarting in 9 seconds...
        Restarting in 8 seconds...
        Restarting in 7 seconds...
        Restarting in 6 seconds...
        Restarting in 5 seconds...
        Restarting in 4 seconds...
        Restarting in 3 seconds...
        Restarting in 2 seconds...
        Restarting in 1 seconds...
        Restarting in 0 seconds...
        Restarting now.
        ets Jun  8 2016 00:22:57

        rst:0xc (SW_CPU_RESET),boot:0x13 (SPI_FAST_FLASH_BOOT)
        configsip: 0, SPIWP:0xee
        clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:0x00,hd_drv:0x00,wp_drv:0x00
        mode:DIO, clock div:2
        load:0x3fff0030,len:6276
        load:0x40078000,len:15716
        load:0x40080400,len:4
        ho 8 tail 4 room 4
        load:0x40080404,len:3860
        entry 0x4008063c
        I (30) boot: ESP-IDF v5.4 2nd stage bootloader
        I (31) boot: compile time Jan  9 2025 12:16:47
        I (31) boot: Multicore bootloader
        I (32) boot: chip revision: v1.0
        I (35) boot.esp32: SPI Speed      : 40MHz
        I (39) boot.esp32: SPI Mode       : DIO
        I (42) boot.esp32: SPI Flash Size : 2MB
        I (46) boot: Enabling RNG early entropy source...
        I (50) boot: Partition Table:
        I (53) boot: ## Label            Usage          Type ST Offset   Length
        I (59) boot:  0 nvs              WiFi data        01 02 00009000 00006000
        I (66) boot:  1 phy_init         RF data          01 01 0000f000 00001000
        I (72) boot:  2 factory          factory app      00 00 00010000 00100000
        I (79) boot: End of partition table
        I (82) esp_image: segment 0: paddr=00010020 vaddr=3f400020 size=097e4h ( 38884) map
        I (103) esp_image: segment 1: paddr=0001980c vaddr=3ff80000 size=0001ch (    28) load
        I (103) esp_image: segment 2: paddr=00019830 vaddr=3ffb0000 size=02314h (  8980) load
        I (110) esp_image: segment 3: paddr=0001bb4c vaddr=40080000 size=044cch ( 17612) load
        I (121) esp_image: segment 4: paddr=00020020 vaddr=400d0020 size=133fch ( 78844) map
        I (149) esp_image: segment 5: paddr=00033424 vaddr=400844cc size=08734h ( 34612) load
        I (169) boot: Loaded app from partition at offset 0x10000
        I (169) boot: Disabling RNG early entropy source...
        I (179) cpu_start: Multicore app
        I (187) cpu_start: Pro cpu start user code
        I (187) cpu_start: cpu freq: 160000000 Hz
        I (187) app_init: Application information:
        I (188) app_init: Project name:     hello_world
        I (192) app_init: App version:      1
        I (195) app_init: Compile time:     Jan  9 2025 12:16:44
        I (200) app_init: ELF file SHA256:  7674a0c36...
        I (205) app_init: ESP-IDF:          v5.4
        I (208) efuse_init: Min chip rev:     v0.0
        I (212) efuse_init: Max chip rev:     v3.99 
        I (216) efuse_init: Chip rev:         v1.0
        I (220) heap_init: Initializing. RAM available for dynamic allocation:
        I (226) heap_init: At 3FFAE6E0 len 00001920 (6 KiB): DRAM
        I (231) heap_init: At 3FFB2BD0 len 0002D430 (181 KiB): DRAM
        I (236) heap_init: At 3FFE0440 len 00003AE0 (14 KiB): D/IRAM
        I (242) heap_init: At 3FFE4350 len 0001BCB0 (111 KiB): D/IRAM
        I (247) heap_init: At 4008CC00 len 00013400 (77 KiB): IRAM
        I (254) spi_flash: detected chip: generic
        I (256) spi_flash: flash io: dio
        W (259) spi_flash: Detected size(4096k) larger than the size in the binary image header(2048k). Using the size in the binary image header.
        I (272) main_task: Started on CPU0
        I (282) main_task: Calling app_main()
        Hello world!
        This is esp32 chip with 2 CPU core(s), WiFi/BTBLE, silicon revision v1.0, 2MB external flash
        Minimum free heap size: 305356 bytes
        Restarting in 10 seconds...


dazu folgende Befehle eingegeben:
        2001  mkdir -p ~/esp
        2002  cd ~/esp
        2003  git clone -b v5.4 --recursive https://github.com/espressif/esp-idf.git
        2004  cd ~/esp/esp-idf
        2005  ./install.sh esp32
        2006  sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0
        2007  ./install.sh esp32
        2008  . ./export.sh
        2009  cd /home/oj/esp/esp-idf/examples/get-started
       
        2014  sudo chmod 666 /dev/ttyUSB0
        
        2016  cd ~/esp
        2017  cp -r $IDF_PATH/examples/get-started/hello_world .
        2018  cd ~/esp/hello_world
        2019  idf.py set-target esp32
        
        2020  idf.py menuconfig
        
        2021  idf.py build

        2024  cd /home/oj/esp/hello_world/build
        2025  python -m esptool --chip esp32 -b 460800 --before default_reset --after hard_reset write_flash "@flash_args"

6.) Build and flash hello world
        . $HOME/esp/esp-idf/export.sh
        cd /home/oj/esp/hello_world
        idf.py build
        idf.py flash